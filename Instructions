Ton projet s'appelle « menu » et ton application « blog », c'est là qu'il faut coder en priorité.


Comment fonctionne Django : 

1/ On définit les fonctions et l'apparence dans views.py (de l'application blog)

ex : def home(request):
    """ Exemple de page HTML, non valide pour que l'exemple soit concis """
    text = """<h1>Bienvenue sur mon blog !</h1>
              <p>Les crêpes bretonnes ça tue des mouettes en plein vol !</p>"""
    return HttpResponse(text)


2/ On les importe dans urls.py (de l'application blog) et on leur attribut un url :

from blog import views

urlpatterns = [
    url(r'^accueil$', views.home), # Accueil du blog
    url(r'^article/(\d+)$', views.view_article),  # Vue d'un article
]


3/ On fait des includes dans l'urls.py du projet :

urlpatterns = [
   url(r'^blog/', include('blog.urls')),
]


4/ Le views.py du projet (menu) reste quasiment vide :
from django.shortcuts import render



Attention, dans le settings.py du projet il faut ajouter à la main chaque application créée : 

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog',
]



Expression régulière (ou « regex ») sont utilisées ici pour créer des URL plus souples. 

Dans ce cas-ci :
^ indique le début de la chaîne (autrement dit, il ne peut rien y avoir avant accueil) ;
? indique que le caractère précédent peut être absent ;
$ est le contraire de ^, il indique la fin de la chaîne.

C'est la vue qui se charge de transmettre l'information de la requête au template, puis de retourner le HTML généré au client. 
La méthode HttpResponse(text) renvoye le HTML au navigateur. Cette méthode prend comme paramètre une chaîne de caractères et la renvoie sous la forme d'une réponse HTTP. 
La fonction render a elle été conçue pour  appeler notre template, et générer la réponse à partir de celui-ci.
=> En pratique, et pour respecter l'architecture dictée par le framework Django, toute vue doit retourner un objet HttpResponse construit via un template.
Pour respecter cette règle, il existe des fonctions nous facilitant le travail, comme render. Elle permet de construire la réponse HTML en fonction d'un fichier template et de variables.

Ex  dans view.py du blog :
return render(request, 'blog/addition.html', locals())
Ce qui donnera dans url.py du blog :
urlspatterns = [
    url(r'^addition/(?P<nombre1>\d+)/(?P<nombre2>\d+)/$', views.addition)
]


Les templates permettent également de faire plusieurs traitements, comme afficher une variable, la transformer, faire des conditions... Attention cependant, ces traitements ont pour unique but d'afficher les données, pas de les modifier.


Il est possible de factoriser des blocs HTML (comme le début et la fin d'une page) via l'utilisation des tags{% block %}et{% extends %} :


Ex de page de blog utilisant un template (équivalent du include en php) grâce au tag {% extends %} = héritage de templates :

{% extends "base.html" %}
On déclare des blocs, qui seront définis dans un autre template, et réutilisables :
{% block title %}Ma page d'accueil{% endblock %}
{% block content %}
    <h2>Bienvenue !</h2>
    <p>
       Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec rhoncus 
       massa non tortor. Vestibulum diam diam, posuere in viverra in, 
       ullamcorper et libero. Donec eget libero quis risus congue imperdiet ac 
       id lectus. Nam euismod cursus arcu, et consequat libero ullamcorper sit 
       amet.
    </p>
{% endblock %}

 
Dans cet exemple, nous avons défini deux blocs,title et content. Le tag extends va aller chercher dans le template donné en argument, ici base.html, et remplacer les blocs vides de ce dernier par les blocs de même nom définis dans le template appelé par la vue. Ainsi,title et content seront repris du template fils, mais nav sera le bloc nav défini dans base.html. 

Afin de faciliter le développement, Django possède un tag{% url %}permettant la construction d'URL en lui fournissant la vue à appeler et ses éventuels paramètres.
L'ajout de fichiers statiques dans notre template (images, CSS, JavaScript) peut se faire via l'utilisation du tag{% static %}.




Pour rajouter votre nouveau modèle, il faut donc lancer dans le bash :
python manage.py makemigrations 
python manage.py migrate

